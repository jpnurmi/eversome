/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef UserStore_TYPES_H
#define UserStore_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"


namespace evernote { namespace edam {

enum SponsoredGroupRole {
  GROUP_MEMBER = 1,
  GROUP_ADMIN = 2,
  GROUP_OWNER = 3
};

typedef struct _PublicUserInfo__isset {
  _PublicUserInfo__isset() : privilege(false), username(false), noteStoreUrl(false) {}
  bool privilege;
  bool username;
  bool noteStoreUrl;
} _PublicUserInfo__isset;

class PublicUserInfo {
 public:

  static const char* ascii_fingerprint; // = "ACE0BEB227C4D0B5BB056041973A6030";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE0,0xBE,0xB2,0x27,0xC4,0xD0,0xB5,0xBB,0x05,0x60,0x41,0x97,0x3A,0x60,0x30};

  PublicUserInfo() : userId(0), shardId(""), username(""), noteStoreUrl("") {
  }

  virtual ~PublicUserInfo() throw() {}

  evernote::edam::UserID userId;
  std::string shardId;
  evernote::edam::PrivilegeLevel privilege;
  std::string username;
  std::string noteStoreUrl;

  _PublicUserInfo__isset __isset;

  bool operator == (const PublicUserInfo & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(shardId == rhs.shardId))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    return true;
  }
  bool operator != (const PublicUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PublicUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PremiumInfo__isset {
  _PremiumInfo__isset() : premiumExpirationDate(false), sponsoredGroupName(false), sponsoredGroupRole(false), businessName(false), businessAdmin(false) {}
  bool premiumExpirationDate;
  bool sponsoredGroupName;
  bool sponsoredGroupRole;
  bool businessName;
  bool businessAdmin;
} _PremiumInfo__isset;

class PremiumInfo {
 public:

  static const char* ascii_fingerprint; // = "6C8AD5B945651CA70292CC21A279E3F5";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x8A,0xD5,0xB9,0x45,0x65,0x1C,0xA7,0x02,0x92,0xCC,0x21,0xA2,0x79,0xE3,0xF5};

  PremiumInfo() : currentTime(0), premium(0), premiumRecurring(0), premiumExpirationDate(0), premiumExtendable(0), premiumPending(0), premiumCancellationPending(0), canPurchaseUploadAllowance(0), sponsoredGroupName(""), businessName(""), businessAdmin(0) {
  }

  virtual ~PremiumInfo() throw() {}

  evernote::edam::Timestamp currentTime;
  bool premium;
  bool premiumRecurring;
  evernote::edam::Timestamp premiumExpirationDate;
  bool premiumExtendable;
  bool premiumPending;
  bool premiumCancellationPending;
  bool canPurchaseUploadAllowance;
  std::string sponsoredGroupName;
  SponsoredGroupRole sponsoredGroupRole;
  std::string businessName;
  bool businessAdmin;

  _PremiumInfo__isset __isset;

  bool operator == (const PremiumInfo & rhs) const
  {
    if (!(currentTime == rhs.currentTime))
      return false;
    if (!(premium == rhs.premium))
      return false;
    if (!(premiumRecurring == rhs.premiumRecurring))
      return false;
    if (__isset.premiumExpirationDate != rhs.__isset.premiumExpirationDate)
      return false;
    else if (__isset.premiumExpirationDate && !(premiumExpirationDate == rhs.premiumExpirationDate))
      return false;
    if (!(premiumExtendable == rhs.premiumExtendable))
      return false;
    if (!(premiumPending == rhs.premiumPending))
      return false;
    if (!(premiumCancellationPending == rhs.premiumCancellationPending))
      return false;
    if (!(canPurchaseUploadAllowance == rhs.canPurchaseUploadAllowance))
      return false;
    if (__isset.sponsoredGroupName != rhs.__isset.sponsoredGroupName)
      return false;
    else if (__isset.sponsoredGroupName && !(sponsoredGroupName == rhs.sponsoredGroupName))
      return false;
    if (__isset.sponsoredGroupRole != rhs.__isset.sponsoredGroupRole)
      return false;
    else if (__isset.sponsoredGroupRole && !(sponsoredGroupRole == rhs.sponsoredGroupRole))
      return false;
    if (__isset.businessName != rhs.__isset.businessName)
      return false;
    else if (__isset.businessName && !(businessName == rhs.businessName))
      return false;
    if (__isset.businessAdmin != rhs.__isset.businessAdmin)
      return false;
    else if (__isset.businessAdmin && !(businessAdmin == rhs.businessAdmin))
      return false;
    return true;
  }
  bool operator != (const PremiumInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PremiumInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationResult__isset {
  _AuthenticationResult__isset() : user(false), publicUserInfo(false), noteStoreUrl(false), webApiUrlPrefix(false) {}
  bool user;
  bool publicUserInfo;
  bool noteStoreUrl;
  bool webApiUrlPrefix;
} _AuthenticationResult__isset;

class AuthenticationResult {
 public:

  static const char* ascii_fingerprint; // = "FADFDE6430A32EB9D23A3D14199996E1";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xDF,0xDE,0x64,0x30,0xA3,0x2E,0xB9,0xD2,0x3A,0x3D,0x14,0x19,0x99,0x96,0xE1};

  AuthenticationResult() : currentTime(0), authenticationToken(""), expiration(0), noteStoreUrl(""), webApiUrlPrefix("") {
  }

  virtual ~AuthenticationResult() throw() {}

  evernote::edam::Timestamp currentTime;
  std::string authenticationToken;
  evernote::edam::Timestamp expiration;
  evernote::edam::User user;
  PublicUserInfo publicUserInfo;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;

  _AuthenticationResult__isset __isset;

  bool operator == (const AuthenticationResult & rhs) const
  {
    if (!(currentTime == rhs.currentTime))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(expiration == rhs.expiration))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.publicUserInfo != rhs.__isset.publicUserInfo)
      return false;
    else if (__isset.publicUserInfo && !(publicUserInfo == rhs.publicUserInfo))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    return true;
  }
  bool operator != (const AuthenticationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BootstrapSettings__isset {
  _BootstrapSettings__isset() : enableFacebookSharing(false), enableGiftSubscriptions(false), enableSupportTickets(false), enableSharedNotebooks(false), enableSingleNoteSharing(false), enableSponsoredAccounts(false), enableTwitterSharing(false), enableLinkedInSharing(false) {}
  bool enableFacebookSharing;
  bool enableGiftSubscriptions;
  bool enableSupportTickets;
  bool enableSharedNotebooks;
  bool enableSingleNoteSharing;
  bool enableSponsoredAccounts;
  bool enableTwitterSharing;
  bool enableLinkedInSharing;
} _BootstrapSettings__isset;

class BootstrapSettings {
 public:

  static const char* ascii_fingerprint; // = "8090B65B701C6C2E81ED1017FE437B1A";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x90,0xB6,0x5B,0x70,0x1C,0x6C,0x2E,0x81,0xED,0x10,0x17,0xFE,0x43,0x7B,0x1A};

  BootstrapSettings() : serviceHost(""), marketingUrl(""), supportUrl(""), accountEmailDomain(""), enableFacebookSharing(0), enableGiftSubscriptions(0), enableSupportTickets(0), enableSharedNotebooks(0), enableSingleNoteSharing(0), enableSponsoredAccounts(0), enableTwitterSharing(0), enableLinkedInSharing(0) {
  }

  virtual ~BootstrapSettings() throw() {}

  std::string serviceHost;
  std::string marketingUrl;
  std::string supportUrl;
  std::string accountEmailDomain;
  bool enableFacebookSharing;
  bool enableGiftSubscriptions;
  bool enableSupportTickets;
  bool enableSharedNotebooks;
  bool enableSingleNoteSharing;
  bool enableSponsoredAccounts;
  bool enableTwitterSharing;
  bool enableLinkedInSharing;

  _BootstrapSettings__isset __isset;

  bool operator == (const BootstrapSettings & rhs) const
  {
    if (!(serviceHost == rhs.serviceHost))
      return false;
    if (!(marketingUrl == rhs.marketingUrl))
      return false;
    if (!(supportUrl == rhs.supportUrl))
      return false;
    if (!(accountEmailDomain == rhs.accountEmailDomain))
      return false;
    if (__isset.enableFacebookSharing != rhs.__isset.enableFacebookSharing)
      return false;
    else if (__isset.enableFacebookSharing && !(enableFacebookSharing == rhs.enableFacebookSharing))
      return false;
    if (__isset.enableGiftSubscriptions != rhs.__isset.enableGiftSubscriptions)
      return false;
    else if (__isset.enableGiftSubscriptions && !(enableGiftSubscriptions == rhs.enableGiftSubscriptions))
      return false;
    if (__isset.enableSupportTickets != rhs.__isset.enableSupportTickets)
      return false;
    else if (__isset.enableSupportTickets && !(enableSupportTickets == rhs.enableSupportTickets))
      return false;
    if (__isset.enableSharedNotebooks != rhs.__isset.enableSharedNotebooks)
      return false;
    else if (__isset.enableSharedNotebooks && !(enableSharedNotebooks == rhs.enableSharedNotebooks))
      return false;
    if (__isset.enableSingleNoteSharing != rhs.__isset.enableSingleNoteSharing)
      return false;
    else if (__isset.enableSingleNoteSharing && !(enableSingleNoteSharing == rhs.enableSingleNoteSharing))
      return false;
    if (__isset.enableSponsoredAccounts != rhs.__isset.enableSponsoredAccounts)
      return false;
    else if (__isset.enableSponsoredAccounts && !(enableSponsoredAccounts == rhs.enableSponsoredAccounts))
      return false;
    if (__isset.enableTwitterSharing != rhs.__isset.enableTwitterSharing)
      return false;
    else if (__isset.enableTwitterSharing && !(enableTwitterSharing == rhs.enableTwitterSharing))
      return false;
    if (__isset.enableLinkedInSharing != rhs.__isset.enableLinkedInSharing)
      return false;
    else if (__isset.enableLinkedInSharing && !(enableLinkedInSharing == rhs.enableLinkedInSharing))
      return false;
    return true;
  }
  bool operator != (const BootstrapSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BootstrapProfile {
 public:

  static const char* ascii_fingerprint; // = "F08DD366855A088C3D9A0CF696FDB702";
  static const uint8_t binary_fingerprint[16]; // = {0xF0,0x8D,0xD3,0x66,0x85,0x5A,0x08,0x8C,0x3D,0x9A,0x0C,0xF6,0x96,0xFD,0xB7,0x02};

  BootstrapProfile() : name("") {
  }

  virtual ~BootstrapProfile() throw() {}

  std::string name;
  BootstrapSettings settings;

  bool operator == (const BootstrapProfile & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const BootstrapProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BootstrapInfo {
 public:

  static const char* ascii_fingerprint; // = "590749F5B2844758224774B43EF73603";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0x07,0x49,0xF5,0xB2,0x84,0x47,0x58,0x22,0x47,0x74,0xB4,0x3E,0xF7,0x36,0x03};

  BootstrapInfo() {
  }

  virtual ~BootstrapInfo() throw() {}

  std::vector<BootstrapProfile>  profiles;

  bool operator == (const BootstrapInfo & rhs) const
  {
    if (!(profiles == rhs.profiles))
      return false;
    return true;
  }
  bool operator != (const BootstrapInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
